name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macOS
            arch: Apple-Silicon
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macOS
            arch: Intel

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: Windows
            arch: x64

          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: Linux
            arch: x64

    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Tauri app
        run: npm run tauri build -- --target ${{ matrix.target }}

      - name: Rename files (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          cd src-tauri/target/${{ matrix.target }}/release/bundle/dmg || exit 1
          ls -la
          for file in *.dmg; do
            if [ -f "$file" ]; then
              echo "Renaming: $file"
              mv "$file" "M3U8-Downloader-${GITHUB_REF_NAME}-${{ matrix.platform }}-${{ matrix.arch }}.dmg" || true
            fi
          done
          ls -la

      - name: Rename files (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd src-tauri/target/${{ matrix.target }}/release/bundle/msi || exit 1
          ls -la
          for file in *.msi; do
            if [ -f "$file" ]; then
              echo "Renaming: $file"
              mv "$file" "M3U8-Downloader-${GITHUB_REF_NAME}-${{ matrix.platform }}-${{ matrix.arch }}.msi" || true
            fi
          done
          if [ -d "../nsis" ]; then
            cd ../nsis
            ls -la
            for file in *.exe; do
              if [ -f "$file" ]; then
                echo "Renaming: $file"
                mv "$file" "M3U8-Downloader-${GITHUB_REF_NAME}-${{ matrix.platform }}-${{ matrix.arch }}-setup.exe" || true
              fi
            done
          fi

      - name: Rename files (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd src-tauri/target/${{ matrix.target }}/release/bundle || exit 1
          ls -la
          if [ -d "deb" ]; then
            cd deb
            ls -la
            for file in *.deb; do
              if [ -f "$file" ]; then
                echo "Renaming: $file"
                mv "$file" "M3U8-Downloader-${GITHUB_REF_NAME}-${{ matrix.platform }}-${{ matrix.arch }}.deb" || true
              fi
            done
            cd ..
          fi
          if [ -d "appimage" ]; then
            cd appimage
            ls -la
            for file in *.AppImage; do
              if [ -f "$file" ]; then
                echo "Renaming: $file"
                mv "$file" "M3U8-Downloader-${GITHUB_REF_NAME}-${{ matrix.platform }}-${{ matrix.arch }}.AppImage" || true
              fi
            done
          fi

      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: M3U8-Downloader-${{ matrix.platform }}-${{ matrix.arch }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: M3U8-Downloader-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: M3U8-Downloader-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

      - name: Create Release (macOS)
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Create Release (Windows)
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Create Release (Linux)
        if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
